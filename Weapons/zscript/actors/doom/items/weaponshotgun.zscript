Class RebalancedShotgun : DoomWeapon replaces Shotgun
{
	Default
	{
		Weapon.SelectionOrder 1300;
		Weapon.AmmoUse 1;
		Weapon.AmmoGive 8;
		Weapon.AmmoType "Shell";
		Weapon.SlotNumber 3;
		Inventory.PickupMessage "$GOTSHOTGUN";
		Obituary "$OB_MPSHOTGUN";
		Tag "$TAG_SHOTGUN";
		Decal "BulletChip";
	}
	
	States
	{
		Ready:
			SHTG A 1 A_WeaponReady;
			Loop;
		Deselect:
			SHTG A 1 A_Lower;
			Loop;
		Select:
			SHTG A 1 A_Raise;
			Loop;
		Fire:
			SHTG A 4 A_FireShotgunRebalanced();
			SHTG A 3 {
				A_WeaponOffset (0, 44, WOF_INTERPOLATE);
				A_ZoomFactor (1.0);
			}
			SHTG A 0 A_WeaponOffset (0, 32);
			SHTG BC 5;
			SHTG D 5 A_EjectShell();
			SHTG CB 5;
			SHTG A 5;
			SHTG A 7 A_ReFire;
			Goto Ready;
		Flash:
			SHTF A 4 Bright A_Light1;
			SHTF B 3 Bright A_Light2;
			Goto LightDone;
		Spawn:
			SHOT A -1;
			Stop;
	}
	
	Action Void A_FireShotgunRebalanced ()
	{
		A_FireBullets (5.6, 2.8, 10, 5); // Less accurate, but more damage
		A_StartSound("weapons/shotgf", CHAN_WEAPON);
		A_GunFlash();
		A_Quake (2.0, 7, 0, 1, "");
		A_WeaponOffset (0, 38, WOF_INTERPOLATE);
		A_ZoomFactor (0.99);
	}
	
	Action Void A_EjectShell ()
	{
		A_Quake (0.25, 5, 0, 1, "");
		A_SpawnItemEx ("EmptyShotgunShell", 8.0, -1.0, 30.0, 0, frandom(4.0, 6.0), frandom(4.0, 5.0), 0, SXF_NOCHECKPOSITION, 0, 0);
	}
}

// Empty shell that is shot out from the side of the shotgun during reload animation

Class EmptyShotgunShell : Actor
{
	Int rollspeed;
	Int decaytime;
	Default
	{
		BounceType "Doom";
		BounceFactor 0.5;
		+RollSprite;
		+RollCenter;
		+UseBounceState;
		+Missile;
		+NoBlockMap;
		+NOSAVEGAME;
		+ThruActors;
	}
	
	Override void PostBeginPlay()
	{
		rollspeed = random (16,128);
		decaytime = TICRATE*12;
	}
	
	States
	{
		Spawn:
			SHCS A 1 A_SetRoll (self.roll+rollspeed);
			Loop;
		
		Bounce:
			SHCS A 1 {
				If (rollspeed > 1) rollspeed = self.rollspeed/2;
				Else rollspeed = 0;
			}
			Goto Spawn;
			
		Death:
			SHCS A 0 {
				A_QueueCorpse();
				A_SetTics (decaytime);
			}
			TNT1 A 0;
			Stop;
	}
}